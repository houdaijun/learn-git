#define ST7796_MCU_TIMING {						     
	{	.tas       =  7, 	                                           
		.tah        =  7,                                            
		.pwl        =  25,                                           
		.pwh        =  25}
	}                                          


union gouda_lcd_timing {
	struct {
		/* Address setup time (RS to WR, RS to RD)in clock number */
		u32 tas:3;
		 u32:1;
		/* Adress hold time in clock number */
		u32 tah:3;
		 u32:1;
		/* Control  pulse width low, in clock number */
		u32 pwl:6;
		 u32:2;
		/* Control pulse width high, in clock number */
		u32 pwh:6;
		 u32:10;
	} mcu;
----------------------------------------------------------------------
struct rda_lcd_info {
	struct rda_lcd_ops ops;
	struct gouda_lcd lcd;
	char name[32];
};
struct rda_lcd_ops {
	int (*s_init_gpio) (void);
	int (*s_open) (void);
	int (*s_readid) (void);
	int (*s_active_win) (struct gouda_rect *rect);
	int (*s_rotation) (int rotate);
	int (*s_sleep) (void);
	int (*s_wakeup) (void);
	int (*s_close) (void);
	int (*s_display_on)(void);
	int (*s_display_off)(void);
	int (*s_rda_lcd_dbg_w)(void *p,int n);
	void (*s_read_fb)(u8 *buffer);
};
struct gouda_lcd {
	u16 width;
	u16 height;
	enum gouda_lcd_interface lcd_interface;
	union gouda_lcd_timing lcd_timing;
	union gouda_lcd_cfg lcd_cfg;
};
enum gouda_lcd_interface {			接口函数选择则
	GOUDA_LCD_IF_DBI = 0,	// 8080		mcu 接口
	GOUDA_LCD_IF_DPI = 1,	// RGB
	GOUDA_LCD_IF_DSI = 2	// MIPI
};
union gouda_lcd_timing {
	struct {
		/* Address setup time (RS to WR, RS to RD)in clock number */
		u32 tas:3;
		 u32:1;
		/* Adress hold time in clock number */
		u32 tah:3;
		 u32:1;
		/* Control  pulse width low, in clock number */
		u32 pwl:6;
		 u32:2;
		/* Control pulse width high, in clock number */
		u32 pwh:6;
		 u32:10;
	} mcu;


----------------------------------------------------------------------------------------------------


DMA是指外部设备不通过CPU而直接与系统内存交换数据的接口技术。

　　要把外设的数据读入内存或把内存的数据传送到外设，一般都要通过CPU控制完成，如CPU程序查询或中断方式。利用中断进行数据传送，可以大大提高CPU的利用率。

  　　但是采用中断传送有它的缺点，对于一个高速I/O设备，以及批量交换数据的情况，只能采用DMA方式，才能解决效率和速度问题。DMA在外设与内存间直接进行数据交换，而不通过CPU，这样数据传送的速度就取决于存储器和外设的工作速度。

　　通常系统的总线是由CPU管理的。在DMA方式时，就希望CPU把这些总线让出来，即CPU连到这些总线上的线处于第三态--高阻状态，而由DMA控制器接管，控制传送的字节数，判断DMA是否结束，以及发出DMA结束信号。DMA控制器必须有以下功能：

　　1. 能向CPU发出系统保持（HOLD）信号，提出总线接管请求；

　　2. 当CPU发出允许接管信号后，负责对总线的控制，进入DMA方式；

　　3. 能对存储器寻址及能修改地址指针，实现对内存的读写操作；

　　4. 能决定本次DMA传送的字节数，判断DMA传送是否结束

　　5. 发出DMA结束信号，使CPU恢复正常工作状态。


如图是DMA控制器硬件结构示意图。

　　DMA的可能引脚说明：

　　数据总线：用于传送数据。

　　地址总线：用于选择存储器地址。

　　数据传送信号：MEMR为存储器读操作信号，MEMW为存储器写操作信号，IOR为外设读操作信号，IOW为外设写操作信号。

　　DRQ：DMA请求信号。是外设向DMA控制器提出要求DMA操作的申请信号。

　　DACK：DMA响应信号。是DMA控制器向提出DMA请求的外设表示已收到请求和正进行处理的信号。

　　HOLD：总线请求信号。是DMA控制器向CPU要求让出总线的请求信号。

　　HLDA：总线响应信号，是CPU向DMA控制器表示允许总线请求的应答信号。


